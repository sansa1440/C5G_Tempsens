
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module C5G_Tempsens(

	//////////// CLOCK //////////
	input 		          		CLOCK_125_p,
	input 		          		CLOCK_50_B5B,
	input 		          		CLOCK_50_B6A,
	input 		          		CLOCK_50_B7A, // This clock use Tempsens
	input 		          		CLOCK_50_B8A,

	//////////// LED //////////
	output		     [7:0]		LEDG,
	output		     [9:0]		LEDR,

	//////////// KEY //////////
	input 		          		CPU_RESET_n,
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,

	//////////// HDMI-TX //////////
	output		          		HDMI_TX_CLK,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_DE,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// ADC SPI //////////
	output		          		ADC_CONVST,
	output		          		ADC_SCK,
	output		          		ADC_SDI,
	input 		          		ADC_SDO,

	//////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
	output		          		I2C_SCL,
	inout 		          		I2C_SDA,

	//////////// SDCARD //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DAT,

	//////////// Uart to USB //////////
	input 		          		UART_RX,
	output		          		UART_TX,

	//////////// SRAM //////////
	output		    [17:0]		SRAM_A,
	output		          		SRAM_CE_n,
	inout 		    [15:0]		SRAM_D,
	output		          		SRAM_LB_n,
	output		          		SRAM_OE_n,
	output		          		SRAM_UB_n,
	output		          		SRAM_WE_n,

//	//////////// LPDDR2 //////////
//	output		     [9:0]		DDR2LP_CA,
//	output		          		DDR2LP_CK_n,
//	output		          		DDR2LP_CK_p,
//	output		     [1:0]		DDR2LP_CKE,
//	output		     [1:0]		DDR2LP_CS_n,
//	output		     [3:0]		DDR2LP_DM,
//	inout 		    [31:0]		DDR2LP_DQ,
//	inout 		     [3:0]		DDR2LP_DQS_n,
//	inout 		     [3:0]		DDR2LP_DQS_p,
//	input 		          		DDR2LP_OCT_RZQ,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk_270kHz;


//=======================================================
//  Structural coding
//=======================================================

//lcdctrl lcdctrl(
//	.clk(clk_270),
//	.reset(CPU_RESET_n),
//	.lcd_e(GPIO[26]),
//	.lcd_rs(GPIO[25]),
//	.lcd_rw(GPIO[27]),
//	.sf_d({GPIO[35:32]}),
//	.data0(hex_data),
//	.data1,
//	.data2,
//	.data3,
//	.data4,
//	.data5
//	);


lcdctrl_init lcdctrl_init(
	.CLK(CLOCK_50_B7A), 		// in
	.LCD_RW(GPIO[27]),  		// out			
	.LCD_RS(GPIO[25]),			// out			 		 
	.LCD_E(GPIO[26]),  			// out			
	.LCD_DB(GPIO[35:32]),  		// out			
	.RDY(LEDR[0]), 				// out
	.DATA(2'h45),				// in
	.OPER(1'b0), 				// in
	.ENB(SW[0]), 				// in
	.RST(~KEY[3])				// in
);
	
slowClock clock_generate(
	.clk(CLOCK_50_B7A),
	.reset(SW[0]),
	.clk_270kHz(clk_270Hz)
	);

	

assign LEDG[0] = clk_270kHz;	
assign LEDG[1] = ~clk_270kHz;
assign LEDG[2] = 1'b1;

endmodule
